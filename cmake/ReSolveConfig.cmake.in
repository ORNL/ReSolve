# Author(s):
# - Ryan Danehy <ryan.danehy@pnnl.gov>


include("${CMAKE_CURRENT_LIST_DIR}/ReSolveTargets.cmake")

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
endif()

include(CheckLanguage)
# This must come before enable_language(CUDA)
if(@RESOLVE_USE_CUDA@)
   set(CMAKE_CUDA_COMPILER @CMAKE_CUDA_COMPILER@)
   enable_language(CUDA)
   check_language(CUDA)
   set(CMAKE_CUDA_FLAGS "@CMAKE_CUDA_FLAGS@")
   find_package(CUDAToolkit REQUIRED)
   add_library(ReSolve::CUDA ALIAS ReSolve::resolve_backend_cuda)
endif()
if(@RESOLVE_USE_HIP@)
  # TODO - This is a bit heavy-handed, but otherwise you get gcc which is not ideal
  #      - if(NOT CMAKE_C_COMPILER) wasn't working at top of file...
  set(CMAKE_C_COMPILER @CMAKE_C_COMPILER@)
  set(CMAKE_CXX_COMPILER @CMAKE_CXX_COMPILER@)
  enable_language(HIP)
  check_language(HIP)
  find_package(hip REQUIRED)
  find_package(rocblas REQUIRED)
  find_package(rocsparse REQUIRED)
  find_package(rocsolver REQUIRED)
  # This is just an agly hack to make HIP build work
  get_target_property(hip_includes hip::device INTERFACE_INCLUDE_DIRECTORIES)
  target_include_directories(ReSolve::resolve_hip INTERFACE $<BUILD_INTERFACE:${hip_includes}>)
  add_library(ReSolve::HIP ALIAS ReSolve::resolve_backend_hip)
endif()

# Compute installation prefix relative to this file.
get_filename_component(_dir "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_prefix "${_dir}/../../.." ABSOLUTE)

# Report other information.
set(ReSolve_INCLUDE_DIRS "${_prefix}/include/")
